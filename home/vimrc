set nocompatible

" Mac OS X bug
filetype on
filetype off

" Plugins
call pathogen#infect()
filetype plugin indent on
syntax on

" Indentdation
set tabstop=2
set shiftwidth=2 softtabstop=2
set smarttab
set expandtab
set smartindent

" Wrapping
set wrap
set linebreak

" Invisibles
set list
set listchars=tab:»»,trail:•
set linebreak
set showbreak=↳

" Navigation
map <down> <nop>
map <left> <nop>
map <right> <nop>
map <up> <nop>

" Scrolling
set ruler
set scrolloff=3

" Search
set hlsearch
set incsearch
set ignorecase
set smartcase

" Completion
inoremap <Nul> <C-x><C-o>
set ofu=syntaxcomplete#Complete
set completeopt+=longest

" Windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Undo
if version >= 703
  set undodir=~/.vim/undodir
  set undofile
  set undolevels=1000
  set undoreload=10000
endif

" Other
set visualbell t_vb=
set modelines=0

" Leaders
nmap <leader>w :w<cr>
nmap <leader>q :q<cr>
nmap <leader>f :Ack 
nmap <leader>g :CSearch 
nmap <leader>n :NERDTreeToggle<cr>
nmap <leader>e :tabnew<cr>
nmap <leader>/ :let @/=''<cr>
nmap <leader>0 :call ToggleColorColumn()<cr>
nmap <leader>1 :call SplitNVertical(1, 79)<cr>
nmap <leader>2 :call SplitNVertical(2, 79)<cr>
nmap <leader>3 :call SplitNVertical(3, 79)<cr>

" Ack
if !has('mac')
  let g:ackprg='ack-grep -H --nocolor --nogroup --column'
endif

" Gist
let g:github_user='jamesreggio'
let g:gist_detect_filetype=1
if has('mac')
  let g:gist_clip_command='pbcopy'
elseif has('unix')
  let g:gist_clip_command='xclip -selection clipboard'
endif

" Local .vimrc
let g:localvimrc_whitelist=expand('^$HOME/')

" NERDTree
let NERDTreeIgnore=['\~$']

" Perforce
let g:p4Presets='P4CONFIG'
let g:p4EnableActiveStatus=0

" Toggle colorcolumn to indicate standard line length
function! ToggleColorColumn()
  if exists('+colorcolumn')
    if &colorcolumn > 0
      set colorcolumn=
    else
      set colorcolumn=80
    endif
  else
    if !exists('w:columnmatch')
      let w:columnmatch=-1
    endif
    if w:columnmatch >= 0
      call matchdelete(w:columnmatch)
      let w:columnmatch=-1
    else
      let w:columnmatch=matchadd('ErrorMsg', '\%>79v.\+')
    endif
  endif
endfunction

" Set window width to support n splits with standard line length
function! SplitNVertical(nSplits, width)
  let &columns=(a:width + 1) * a:nSplits - 1
  execute 'normal \<C-w>='
endfunction
